# Docker Compose for local development
version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: taskmanager-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: taskmanager
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256 --auth-local=scram-sha-256'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d taskmanager']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - taskmanager-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: taskmanager-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: taskmanager
      DB_USER: admin
      DB_PASSWORD: password
      JWT_SECRET: your-super-secret-jwt-key-for-development
      JWT_EXPIRES_IN: 24h
      FRONTEND_URL: http://localhost:3000
    ports:
      - '5000:5000'
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/src:ro # For development hot reload
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:5000/api/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - taskmanager-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taskmanager-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: /api
    ports:
      - '3000:80'
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://127.0.0.1:80/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - taskmanager-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: taskmanager-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - taskmanager-network

  # Adminer for database management (development only)
  adminer:
    image: adminer:latest
    container_name: taskmanager-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      database:
        condition: service_healthy
    environment:
      ADMINER_DEFAULT_SERVER: database
    networks:
      - taskmanager-network
    profiles:
      - development

volumes:
  postgres_data:
    name: taskmanager_postgres_data
  redis_data:
    name: taskmanager_redis_data

networks:
  taskmanager-network:
    name: taskmanager-network
    driver: bridge
